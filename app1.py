# -*- coding: utf-8 -*-
"""app1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vAAii6pc9p7T_GgXlazVIiXOMzr7LGDW
"""

!pip install pyngrok

!pip install -q streamlit

!pip install ipykernel>=5.1.2
!pip install pydeck

import streamlit as st

!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()

import fastai
fastai.__version__

import numpy as np
import matplotlib.image as mpimg
import os
import time
import PIL.Image
import requests
from io import BytesIO

from fastbook import *
from fastai.vision import *

from google.colab import drive
drive.mount('/content/drive')

st.title("Classify Chest X-ray")

path = Path('/content/drive/MyDrive/fastai')
learn_inf = load_learner(path/'export.pkl')

from fastai.vision.widgets import *
from fastai.vision.all import *

from pathlib import Path

import streamlit as st

class Predict:
    def __init__(self, filename):
        self.learn_inference = load_learner(Path()/filename)
        self.img = self.get_image_from_upload()
        if self.img is not None:
            self.display_output()
            self.get_prediction()
    
    @staticmethod
    def get_image_from_upload():
        uploaded_file = st.file_uploader("Upload Files",type=['png','jpeg', 'jpg'])
        if uploaded_file is not None:
            return PILImage.create((uploaded_file))
        return None

    def display_output(self):
        st.image(self.img.to_thumb(500,500), caption='Uploaded Image')

    def get_prediction(self):

        if st.button('Classify'):
            pred, pred_idx, probs = self.learn_inference.predict(self.img)
            st.write(f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}')
        else: 
            st.write(f'Click the button to classify') 

if __name__=='__main__':

    file_name= (path/'export.pkl')

    predictor = Predict(file_name)





# def predict(img, display_img):
        
#           # Display the test image
#           st.image(display_img, use_column_width=True)
        
#           # Temporarily displays a message while executing 
#           with st.spinner('Wait for it...'):
#               time.sleep(3)
        
#           # Load model and make prediction
#           model = load_learner('/content/drive/MyDrive/fastai/')
#           pred_class = model.predict(img)[0] # get the predicted class
#           pred_prob = round(torch.max(model.predict(img)[2]).item()*100) # get the max probability
            
#           # Display the prediction
#           if str(pred_class) == 'PNEUMONIA':
#               st.success("This is an X-ray of PNEUMONIA with the probability of " + str(pred_prob) + '%.')
#           else:
#               st.success("This is a NORMAL X-ray with the probability of " + str(pred_prob) + '%.')

# option = st.radio('', ['Choose a test image', 'Choose your own image'])

#  if option == 'Choose a test image':
            
#           # Test image selection
#           test_images = os.listdir('/content/drive/MyDrive/val/')
#           test_image = st.selectbox(
#               'Please select a test image:', test_images)
            
#           # Read the image
#           file_path = '/content/drive/MyDrive/val/', test_images
#           img = Image.open(file_path)
            
#           # Get the image to display
#           display_img = mpimg.imread(file_path)
            
#           # Predict and display the image
#           predict(img, display_img)

